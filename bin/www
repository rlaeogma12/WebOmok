#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Create socket
 */
var io = require('socket.io')(server);
var SETTINGS = require("../omok/totalSetting.js");



//struct Data
var queue = []; //list of sockets waiting for peers
var socketRoom = {};
var allUsers = {};
var RoomStatus = {}; //save Room data

var findPeerForLoneSocket = function(socket){
  if(queue.length){
    //someone is in queue, pair them!
    var peer = queue.pop();
    var room = socket.id + '#' + peer.id;
    //join them both
    peer.join(room);
    socket.join(room);
    //register rooms to their names
    socketRoom[peer.id] = room;
    socketRoom[socket.id] = room;

    //make roomstatus, default turn set to p1
    RoomStatus[room] = {
      p1 : socket.id,
      p2 : peer.id,
      turn : p1
    };

    //let know for each users.
    peer.emit('completeMatch', {username : "껌정"});
    socket.emit('completeMatch', {username : "하양색"});
  }
  else{
    //if queue is empty, add our lone socket.
    queue.push(socket);
  }
}

var turnOver = function(socket){

}

//io message handle
io.on('connection', function(socket){
  console.log('user(' + socket.id + ') connected.');

  //get request about RandomRoom matching
  socket.on('requestRandomRoom', function(data){
    console.log('request Random Room from User');
    allUsers[socket.id] = socket;
    //check if sb is in queue..
    findPeerForLoneSocket(socket);
  });

  //broadcast to specific room
  socket.on('message', function(data){
    var room = socketRoom[socket.id];
    io.sockets.to(room).emit('message', {
      userid : data.userid,
      message : data.message
    });
  });

  socket.on('turnover', function(data){
    if(RoomStatus[data.id].turn == 'black'){

    }
    else{

    }
  });

  //disconnect handle
  socket.on('disconnect', function(){
    console.log('user(' + socket.id + ') disconnected!');
    var room = rooms[socket.id];
    socket.broadcast.to(room).emit('endMatch');
    var peerID = room.split('#');
    peerID = peerID[0] === socket.id ? peerID[1] : peerID[0];
    //current socket left, add the other one to the queue.
    findPeerForLoneSocket(allUsers[peerID]);
  });
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  console.log("Server is on Port " + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
