#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('myapp:server');
var http = require('http');
var fs = require('fs');

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '9000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);


/*
  Socket Message
*/
var io = require('socket.io').listen(server);

var count = 0;
var rooms = [];

app.get('/:room', function(req, res){
  console.log('room name is : '+req.params.room);
  res.render('index', {room:req.params.room});
})

io.sockets.on('connection',function(socket){

    socket.on('joinroom',function(data){
        socket.join(data.room);

        socket.set('room', data.room,function() {
            var room = data.room;
            var nickname = '손님-'+count;
            socket.set('nickname',nickname,function(){
                socket.emit('changename', {nickname: nickname});

                // Create Room
                if (rooms[room] == undefined) {
                    console.log('room create :' + room);
                    rooms[room] = new Object();
                    rooms[room].socket_ids = new Object();
                }
                // Store current user's nickname and socket.id to MAP
                rooms[room].socket_ids[nickname] = socket.id

                // broad cast join message
                data = {msg: nickname + ' 님이 입장하셨습니다.'};
                io.sockets.in(room).emit('broadcast_msg', data);

                // broadcast changed user list in the room
                io.sockets.in(room).emit('userlist', {users: Object.keys(rooms[room].socket_ids)});
                count++;
            });
        });

    });

    socket.on('changename',function(data){
        socket.get('room',function(err,room){
            socket.get('nickname',function(err,pre_nick) {
                var nickname = data.nickname;
                // if user changes name get previous nickname from nicknames MAP
                if (pre_nick != undefined) {
                    delete rooms[room].socket_ids[pre_nick];
                }
                rooms[room].socket_ids[nickname] = socket.id
                socket.set('nickname',nickname,function() {
                    data = {msg: pre_nick + ' 님이 ' + nickname + '으로 대화명을 변경하셨습니다.'};
                    io.sockets.in(room).emit('broadcast_msg', data);

                    // send changed user nickname lists to clients
                    io.sockets.in(room).emit('userlist', {users: Object.keys(rooms[room].socket_ids)});
                });
            });

        });
    });


    socket.on('disconnect',function(data){
        socket.get('room',function(err,room) {
            if(err) throw err;
            if(room != undefined
                && rooms[room] != undefined){

                socket.get('nickname',function(err,nickname) {
                    console.log('nickname ' + nickname + ' has been disconnected');
                    // 여기에 방을 나갔다는 메세지를 broad cast 하기
                    if (nickname != undefined) {
                        if (rooms[room].socket_ids != undefined
                            && rooms[room].socket_ids[nickname] != undefined)
                            delete rooms[room].socket_ids[nickname];
                    }// if
                    data = {msg: nickname + ' 님이 나가셨습니다.'};

                    io.sockets.in(room).emit('broadcast_msg', data);
                    io.sockets.in(room).emit('userlist', {users: Object.keys(rooms[room].socket_ids)});
                });
            }
        }); //get
    });

    socket.on('send_msg',function(data){
        socket.get('room',function(err,room) {
            socket.get('nickname',function(err,nickname) {
                console.log('in send msg room is ' + room);
                data.msg = nickname + ' : ' + data.msg;
                if (data.to == 'ALL') socket.broadcast.to(room).emit('broadcast_msg', data); // 자신을 제외하고 다른 클라이언트에게 보냄
                else {
                    // 귓속말
                    socket_id = rooms[room].socket_ids[data.to];
                    if (socket_id != undefined) {

                        data.msg = '귓속말 :' + data.msg;
                        io.sockets.socket(socket_id).emit('broadcast_msg', data);
                    }// if
                }
                socket.emit('broadcast_msg', data);
            });
        });
    })
});


/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port, function(){
  console.log("Server is on Port " + port);
});
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
